= Taps-MSSQL-Hack -- a fork of taps, the simple database import/export app

This fork adds a couple of lines so that you can pull into an MSSQL Server DB.

== Status

I haven't touched this since I created it. There's probably a better way to solve this problem now.

== Details

Even with this, it's not that simple...

On the server side, you can use the regular taps gem, but you probably need to:

* Change all DATE columns to be DATETIME (MSSQL doesn't get DATEs)
* Drop views (not 100% sure, but it was good for my situation)

Like this:

  $ mysqladmin -u deploy -pSecret create mydb_backup
  $ mysqldump -u deploy -pSecret mydb | mysql -u deploy -pSecret mydb_backup
  $ echo "DROP VIEW IF EXISTS vw_report;" | mysql -u deploy -pSecret mydb_backup
  $ echo "ALTER TABLE events CHANGE date date DATETIME;" | mysql -u deploy -pSecret mydb_backup

Then, on the pull side, use this hacked version, and be aware that it changes two settings before each table is populated (and back aftewards):

* It activates IDENTITY_INSERT for each table. This can't be set globally in MSSQL, it has to be done for each individual table, within the connection that's going to be doing the insert, and only one table have it activated at a time. 
* It turns off ANSI warnings, which means that taps will not fail (and you will not be warned) when fields with long data get truncated as they are shoehorned into MSSQL.

Do the pull with something like this (obviously you'll need all your ODBC stuff set up right):

  $ taps pull odbc://dbusername:dbpassword@ignoredhostname/DSNforYourDatabase?db_type=mssql http://httpuser:httppassword@yourserver.com:5000

After you have done the pull, you may need to rename all the columns and tables to lowercase (so your active record attribs work as usual and so rails can see the schema_migrations table).

  $ echo -e "SELECT 'EXEC sp_rename ''' + TABLE_SCHEMA + '.' + TABLE_NAME + '.' + COLUMN_NAME + ''', ''' + LOWER(COLUMN_NAME) + ''',''COLUMN''' FROM INFORMATION_SCHEMA.COLUMNS WHERE OBJECTPROPERTY(OBJECT_ID('[' + TABLE_SCHEMA + '].[' + TABLE_NAME + ']'),'isMSShipped') = 0;\nGO" | tsql -S MSSQLVMWARE -U username -P password -D myproj_development | (grep EXEC && echo "GO") | tsql -S MSSQLVMWARE -U username -P password -D myproj_development
  $ echo -e "SELECT 'EXEC sp_rename ''' + TABLE_SCHEMA + '.' + TABLE_NAME + ''', ''' + LOWER(TABLE_NAME) + '''' FROM INFORMATION_SCHEMA.COLUMNS WHERE OBJECTPROPERTY(OBJECT_ID('[' + TABLE_SCHEMA + '].[' + TABLE_NAME + ']'),'isMSShipped') = 0;\nGO" | tsql -S MSSQLVMWARE -U username -P password -D myproj_development | (grep EXEC && echo "GO") | tsql -S MSSQLVMWARE -U username -P password -D myproj_development

And convert any text columns to varchar(8000), truncating where necessary, (so that those columns are comparable by MSSQL):

  $ echo -e "SELECT 'SET ANSI_WARNINGS OFF; ALTER TABLE ' + TABLE_NAME + ' ALTER COLUMN ' + COLUMN_NAME + ' varchar(8000); SET ANSI_WARNINGS ON;' FROM information_schema.columns WHERE DATA_TYPE='text';\nGO" | tsql -S MSSQLVMWARE -U username -P password -D myproj_development | (grep ^SET && echo "GO") | tsql -S MSSQLVMWARE -U username -P password -D myproj_development

Then finally, you can drop the copy of the database you made on the server side:

  $ mysqladmin -u deploy -pSecret drop mydb_backup

This version of taps should work normally if your destination DB is not MSSQL.

Obviously this is an ugly hack. If you have more of an idea than me about where a change could be made to gracefully add MSSQL support to taps I'd like to hear about it (perhaps in the Sequel adapter for MSSQL?).

Good luck!


= Taps -- simple database import/export app

A simple database agnostic import/export app to transfer data to/from a remote database.

== Usage: Server

Here's how you start a taps server

  $ taps server postgres://localdbuser:localdbpass@localhost/dbname httpuser httppassword

You can also specify an encoding in the database url

  $ taps server mysql://localdbuser:localdbpass@localhost/dbname?encoding=latin1 httpuser httppassword

== Usage: Client

When you want to pull down a database from a taps server

  $ taps pull postgres://dbuser:dbpassword@localhost/dbname http://httpuser:httppassword@example.com:5000

or when you want to push a local database to a taps server

  $ taps push postgres://dbuser:dbpassword@localhost/dbname http://httpuser:httppassword@example.com:5000

or when you want to transfer a list of tables

  $ taps push postgres://dbuser:dbpassword@localhost/dbname http://httpuser:httppassword@example.com:5000 --tables logs,tags

or when you want to transfer tables that start with a word

  $ taps push postgres://dbuser:dbpassword@localhost/dbname http://httpuser:httppassword@example.com:5000 --filter '^log_'

== Known Issues

* Foreign Keys get lost in the schema transfer
* Tables without primary keys will be incredibly slow to transfer. This is due to it being inefficient having large offset values in queries.
* Multiple schemas are currently not supported

== Meta

Maintained by Ricardo Chimal, Jr. (ricardo at heroku dot com)

Written by Ricardo Chimal, Jr. (ricardo at heroku dot com) and Adam Wiggins (adam at heroku dot com)

Early research and inspiration by Blake Mizerany

Released under the MIT License: http://www.opensource.org/licenses/mit-license.php

http://github.com/ricardochimal/taps

Special Thanks to Sequel for making this tool possible http://sequel.rubyforge.org/
